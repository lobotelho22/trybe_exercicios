CHMODE: Como dominar o significado dos códigos numéricos

O comando chmode como está lá no course aceita dois tipos de entrada, para alterar permissões de usuários. Uma em que indicamos se alteramos usuário (u), grupo(g), outros (o) ou para todos (a). Além disso, temos que indicar se estamos acidionando(+), mantendo(=) ou excluindo (-) uma permissão, que também deve ser indicada. Neste caso, se é leitura (r), escrita (w) ou execução (x). Um comando chmode seria escrito como no exemplo abaixo:

	$ chmod u-rw lista.txt


A alternativa é a utilização dos códigos numéricos, cuja tabela foi disponibilizada no material didátido do course. Esta última teria um formato mais compacto e, em minha opinião, mais ágil na digitação do comando. A sintaxe é mais econômica, pois acompanharia o comando três dígitos, que variam de 0 a 7, para indicar as alterações de pemissão. Exemplo:

	$ chmod 177 lista.txt
	
No caso do exemplo acima, cada um dos três dígitos indicam as permissões para usuário, grupo e outros, nesta ordem. Esses dígitos representam um caminho para números binários que, aqui, servem para "ligar" e "desligar" as permissões.

Vamos lá, parece complicado mas é mais simples do que aparenta. Vamos com um pouquinho de teoria dos números para entender a questão. Nosso sistema de numeração é chamado _decimal_ porque, não por coincidência, é organizado por grupos de dez algarismos que vão de 0 a 9. No caso dos números binários, como o nome indica, utilizamos dois algarismos, que são 0 e 1. No caso do chmode podemos entender que os dígitos 0 e 1 funcionam como um interruptor, onde o 0 desliga um permissão e o 1 liga a permissão.

Então vamos conferir a tabela dos códigos e os números a que estão ligados:

	--- = 000 ( 0 | Todos Acessos Negados )
	--x = 001 ( 1 | Somente Execução )
	-w- = 010 ( 2 | Somente Escrita )
	-wx = 011 ( 3 | Somente Escrita e Execução )
	r-- = 100 ( 4 | Somente Leitura )
	r-x = 101 ( 5 | Somente Leitura e Execução )
	rw- = 110 ( 6 | Somente Leitura e Escrita )
	rwx = 111 ( 7 | Acesso Total )
	
Perceba, no comando do chmod chamamos a combinação 177, o que significa que destinamos a posição 1 ao usuário. Consultando na tabela, vemos que se trata do código binário 001, que estabelece que o usuário tem permissão apenas para a execução do arquivo. Aqui é fácil a posição está ordenada por rwx (leitura, escrita, execução), o código binário 001 indica que leitura e escrita estão na posição zero, ou seja, desligadas, enquanto o numéro 1 na posição da execução diz que está "ligada", portanto permita ao usuário.

Como repetimos o 7 nas duas posições seguintes no comando chmode, vemos que se refere ao "chaveamento" 111, "ligado, ligado, ligado", permitindo leitura, escrita e execução do arquivo a grupo e outros usuários, respectivamente.

Agora vem o pulo do gato: como relacionamos os códigos binários (100, 010, 011, etc) aos números de índice (0 a 7)?

Vamos com mais um pouquinho de teoria dos números! Dizemos que nossos números são posicionais. Ou seja o 1 não necessariamente é menor que o 3. Isso depende da posição em que ele ocupa em um número. Vejamos com um exemplo: todos concordamos com a afirmação "100 > 30", embora os algarismos 1 e 0 sejam menores que o algarismo 3, as posições que ocupam no número 100 indicam que este é maior que 30. Que posições são essas?

Aprendemos lá no primário: unidade, dezena, centena, etc. Essas são as posições e o valor numérico depende da posição que um algarismo ocupa nessa arquitetura. Podemos "desmembrar" um número como uma expressão que envolve soma, produto e potenciação.

Rememorando as regras de potenciação: se temos um número base elevado à zero, o resultado é 1, Logo 10⁰=1. Portanto se temos um número na casa das unidades, 8, por exemplo. Podemos escrever 8 como 8x10⁰, visto que 8x1=8. São duas formas de representarmos o mesmo número. Se elevarmos um número qualquer a potência 1, teremos como resultado o mesmo número. Ou seja, 10¹=10. Vamos pensar, então como podemos escrever o número 18...

	18 = 1x10¹ + 8x10⁰
	
Vamos lá, o raciocínio é o seguinte 1 x 10¹ é igual a 10 e 8x10⁰=8, como já vimos. Se somamos 10+8, chegamos à 18. Isso funciona a cada casa decimal que o número "cresce", multiplicando por uma potência que aumenta uma unidade a cada casa. Poderíamos, por exemplo escrever o número 3026:

	3026 = 3x10³ + 0x10² + 2x10¹ + 6x10⁰

Com os números binários, o raciocínio é o mesmo, com as essenciais diferenças: por cada posição só podemos utilizar os algarismos 0 e 1 e por conta disso a base da potência de cada casa é o número 2 (duas opções, certo?).

Então, por exemplo, o código binário que se refere à permissão -wx (somente Escrita e Execução), podemos ver na tabela é o 011. Vamos representar esse número como uma expressão envolvendo potências de 2. Contando da direita para esquerda os índices das potências crescem, começando pelo zero:

	011 = 0x2² + 1x2¹ + 1x2⁰
	
resolvendo a expressão teremos:
	
	011 = 0 + 2 + 1 = 3
	
Consultando na tabela vemos que 3 é exatamente o índice dessa posição das "chaves de permissão". O raciocínio se estende aos demais números:

	000 = 0x2² + 0x2¹ + 0x2⁰ = 0
	001 = 0x2² + 0x2¹ + 1x2⁰ = 1
	010 = 0x2² + 1x2¹ + 0x2⁰ = 2
	011 = 0x2² + 0x2¹ + 0x2⁰ = 3
	100 = 1x2² + 0x2¹ + 0x2⁰ = 4
	101 = 1x2² + 0x2¹ + 1x2⁰ = 5
	110 = 1x2² + 1x2¹ + 0x2⁰ = 6
	111 = 1x2² + 1x2¹ + 1x2⁰ = 7
	
E a gente dizia na escola que Matemática não serve pra nada... rs
	
